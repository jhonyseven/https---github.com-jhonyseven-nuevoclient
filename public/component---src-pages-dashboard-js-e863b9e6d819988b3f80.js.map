{"version":3,"sources":["webpack:///./src/components/MyEditor.js","webpack:///./src/pages/dashboard.js"],"names":["MyEditor","props","state","editorState","EditorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","this","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","render","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","onToggle","onClick","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","React","Component","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","preventDefault","style","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","dashboard"],"mappings":"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","file":"component---src-pages-dashboard-js-e863b9e6d819988b3f80.js","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, getDefaultKeyBinding, RichUtils} from 'draft-js';\nimport './MyEditor.css'\n\n class MyEditor extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {editorState: EditorState.createEmpty()};\n\n      this.focus = () => this.refs.editor.focus();\n      this.onChange = (editorState) => this.setState({editorState});\n\n      this.handleKeyCommand = this._handleKeyCommand.bind(this);\n      this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n      this.toggleBlockType = this._toggleBlockType.bind(this);\n      this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    }\n\n    _handleKeyCommand(command, editorState) {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n      return false;\n    }\n\n    _mapKeyToEditorCommand(e) {\n      if (e.keyCode === 9 /* TAB */) {\n        const newEditorState = RichUtils.onTab(\n          e,\n          this.state.editorState,\n          4, /* maxDepth */\n        );\n        if (newEditorState !== this.state.editorState) {\n          this.onChange(newEditorState);\n        }\n        return;\n      }\n      return getDefaultKeyBinding(e);\n    }\n\n    _toggleBlockType(blockType) {\n      this.onChange(\n        RichUtils.toggleBlockType(\n          this.state.editorState,\n          blockType\n        )\n      );\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n      this.onChange(\n        RichUtils.toggleInlineStyle(\n          this.state.editorState,\n          inlineStyle\n        )\n      );\n    }\n\n    render() {\n      const {editorState} = this.state;\n\n      // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n      let className = 'RichEditor-editor';\n      let contentState = editorState.getCurrentContent();\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      return (\n        <div className=\"RichEditor-root\">\n          <BlockStyleControls\n            editorState={editorState}\n            onToggle={this.toggleBlockType}\n          />\n          <InlineStyleControls\n            editorState={editorState}\n            onToggle={this.toggleInlineStyle}\n          />\n          <div className={className} onClick={this.focus}>\n            <Editor\n              blockStyleFn={getBlockStyle}\n              customStyleMap={styleMap}\n              editorState={editorState}\n              handleKeyCommand={this.handleKeyCommand}\n              keyBindingFn={this.mapKeyToEditorCommand}\n              onChange={this.onChange}\n              placeholder=\"Escribir\"\n              ref=\"editor\"\n              spellCheck={true}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  const styleMap = {\n    CODE: {\n      backgroundColor: 'rgba(0, 0, 0, 0.05)',\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n      fontSize: 16,\n      padding: 2,\n    },\n  };\n\n  function getBlockStyle(block) {\n    switch (block.getType()) {\n      case 'blockquote': return 'RichEditor-blockquote';\n      default: return null;\n    }\n  }\n\n  class StyleButton extends React.Component {\n    constructor() {\n      super();\n      this.onToggle = (e) => {\n        e.preventDefault();\n        this.props.onToggle(this.props.style);\n      };\n    }\n\n    render() {\n      let className = 'RichEditor-styleButton';\n      if (this.props.active) {\n        className += ' RichEditor-activeButton';\n      }\n\n      return (\n        <span className={className} onMouseDown={this.onToggle}>\n          {this.props.label}\n        </span>\n      );\n    }\n  }\n\n  const BLOCK_TYPES = [\n    {label: 'H1', style: 'header-one'},\n    {label: 'H2', style: 'header-two'},\n    {label: 'H3', style: 'header-three'},\n    {label: 'H4', style: 'header-four'},\n    {label: 'H5', style: 'header-five'},\n    {label: 'H6', style: 'header-six'},\n    {label: 'Blockquote', style: 'blockquote'},\n    {label: 'UL', style: 'unordered-list-item'},\n    {label: 'OL', style: 'ordered-list-item'},\n  ];\n\n  const BlockStyleControls = (props) => {\n    const {editorState} = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n      .getCurrentContent()\n      .getBlockForKey(selection.getStartKey())\n      .getType();\n\n    return (\n      <div className=\"RichEditor-controls\">\n        {BLOCK_TYPES.map((type) =>\n          <StyleButton\n            key={type.label}\n            active={type.style === blockType}\n            label={type.label}\n            onToggle={props.onToggle}\n            style={type.style}\n          />\n        )}\n      </div>\n    );\n  };\n\n  let INLINE_STYLES = [\n    {label: 'Bold', style: 'BOLD'},\n    {label: 'Italic', style: 'ITALIC'},\n    {label: 'Underline', style: 'UNDERLINE'},\n    {label: 'Monospace', style: 'CODE'},\n  ];\n\n  const InlineStyleControls = (props) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n    \n    return (\n      <div className=\"RichEditor-controls\">\n        {INLINE_STYLES.map((type) =>\n          <StyleButton\n            key={type.label}\n            active={currentStyle.has(type.style)}\n            label={type.label}\n            onToggle={props.onToggle}\n            style={type.style}\n          />\n        )}\n      </div>\n    );\n  };\n\n  export default MyEditor;","import React from \"react\"\nimport MyEditor from \"../components/MyEditor\"\n\nexport default  function dashboard () {\n    return (\n        <div>\n            <MyEditor />\n        </div>\n    )\n}\n"],"sourceRoot":""}